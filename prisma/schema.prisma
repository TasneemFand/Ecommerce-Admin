// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url  	    = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String   @unique
  password      String
  stores        Store[]  @relation("UserStores")
}

model Store {
  id         String      @id @default(uuid()) @map("_id")
  name       String
  userId     String
  user       User       @relation("UserStores", fields: [userId], references: [id])
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
}

model Product {
  id         String      @id @default(uuid()) @map("_id")
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid()) @map("_id")
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  customerId  String?
  customer    Customer?   @relation("CustomerOrders", fields: [customerId], references: [id])
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([customerId])
}

model OrderItem {
  id        String  @id @default(uuid()) @map("_id")
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Customer {
  id         String    @id @default(cuid()) @map("_id")
  name       String
  email      String    @unique
  password   String
  orders     Order[]   @relation("CustomerOrders")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}